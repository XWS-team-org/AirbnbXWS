// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.4
// source: reservation/reservation-service.proto

package reservation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReservationService_GetActiveForHost_FullMethodName          = "/ReservationService/GetActiveForHost"
	ReservationService_GetActiveForGuest_FullMethodName         = "/ReservationService/GetActiveForGuest"
	ReservationService_GetFutureForAccommodation_FullMethodName = "/ReservationService/GetFutureForAccommodation"
	ReservationService_ManualReservation_FullMethodName         = "/ReservationService/ManualReservation"
	ReservationService_AutomaticReservation_FullMethodName      = "/ReservationService/AutomaticReservation"
	ReservationService_ApproveReservation_FullMethodName        = "/ReservationService/ApproveReservation"
	ReservationService_CancelReservation_FullMethodName         = "/ReservationService/CancelReservation"
)

// ReservationServiceClient is the client API for ReservationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationServiceClient interface {
	GetActiveForHost(ctx context.Context, in *GetActiveForHostRequest, opts ...grpc.CallOption) (*GetActiveForHostResponse, error)
	GetActiveForGuest(ctx context.Context, in *GetActiveForGuestRequest, opts ...grpc.CallOption) (*GetActiveForGuestResponse, error)
	GetFutureForAccommodation(ctx context.Context, in *GetFutureForAccommodationRequest, opts ...grpc.CallOption) (*GetFutureForAccommodationResponse, error)
	ManualReservation(ctx context.Context, in *ManualReservationRequest, opts ...grpc.CallOption) (*ManualReservationResponse, error)
	AutomaticReservation(ctx context.Context, in *AutomaticReservationRequest, opts ...grpc.CallOption) (*AutomaticReservationResponse, error)
	ApproveReservation(ctx context.Context, in *ApproveReservationRequest, opts ...grpc.CallOption) (*ApproveReservationResponse, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error)
}

type reservationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationServiceClient(cc grpc.ClientConnInterface) ReservationServiceClient {
	return &reservationServiceClient{cc}
}

func (c *reservationServiceClient) GetActiveForHost(ctx context.Context, in *GetActiveForHostRequest, opts ...grpc.CallOption) (*GetActiveForHostResponse, error) {
	out := new(GetActiveForHostResponse)
	err := c.cc.Invoke(ctx, ReservationService_GetActiveForHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetActiveForGuest(ctx context.Context, in *GetActiveForGuestRequest, opts ...grpc.CallOption) (*GetActiveForGuestResponse, error) {
	out := new(GetActiveForGuestResponse)
	err := c.cc.Invoke(ctx, ReservationService_GetActiveForGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) GetFutureForAccommodation(ctx context.Context, in *GetFutureForAccommodationRequest, opts ...grpc.CallOption) (*GetFutureForAccommodationResponse, error) {
	out := new(GetFutureForAccommodationResponse)
	err := c.cc.Invoke(ctx, ReservationService_GetFutureForAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) ManualReservation(ctx context.Context, in *ManualReservationRequest, opts ...grpc.CallOption) (*ManualReservationResponse, error) {
	out := new(ManualReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_ManualReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) AutomaticReservation(ctx context.Context, in *AutomaticReservationRequest, opts ...grpc.CallOption) (*AutomaticReservationResponse, error) {
	out := new(AutomaticReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_AutomaticReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) ApproveReservation(ctx context.Context, in *ApproveReservationRequest, opts ...grpc.CallOption) (*ApproveReservationResponse, error) {
	out := new(ApproveReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_ApproveReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceClient) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error) {
	out := new(CancelReservationResponse)
	err := c.cc.Invoke(ctx, ReservationService_CancelReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServiceServer is the server API for ReservationService service.
// All implementations must embed UnimplementedReservationServiceServer
// for forward compatibility
type ReservationServiceServer interface {
	GetActiveForHost(context.Context, *GetActiveForHostRequest) (*GetActiveForHostResponse, error)
	GetActiveForGuest(context.Context, *GetActiveForGuestRequest) (*GetActiveForGuestResponse, error)
	GetFutureForAccommodation(context.Context, *GetFutureForAccommodationRequest) (*GetFutureForAccommodationResponse, error)
	ManualReservation(context.Context, *ManualReservationRequest) (*ManualReservationResponse, error)
	AutomaticReservation(context.Context, *AutomaticReservationRequest) (*AutomaticReservationResponse, error)
	ApproveReservation(context.Context, *ApproveReservationRequest) (*ApproveReservationResponse, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error)
	mustEmbedUnimplementedReservationServiceServer()
}

// UnimplementedReservationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedReservationServiceServer struct {
}

func (UnimplementedReservationServiceServer) GetActiveForHost(context.Context, *GetActiveForHostRequest) (*GetActiveForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveForHost not implemented")
}
func (UnimplementedReservationServiceServer) GetActiveForGuest(context.Context, *GetActiveForGuestRequest) (*GetActiveForGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveForGuest not implemented")
}
func (UnimplementedReservationServiceServer) GetFutureForAccommodation(context.Context, *GetFutureForAccommodationRequest) (*GetFutureForAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFutureForAccommodation not implemented")
}
func (UnimplementedReservationServiceServer) ManualReservation(context.Context, *ManualReservationRequest) (*ManualReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ManualReservation not implemented")
}
func (UnimplementedReservationServiceServer) AutomaticReservation(context.Context, *AutomaticReservationRequest) (*AutomaticReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AutomaticReservation not implemented")
}
func (UnimplementedReservationServiceServer) ApproveReservation(context.Context, *ApproveReservationRequest) (*ApproveReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveReservation not implemented")
}
func (UnimplementedReservationServiceServer) CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedReservationServiceServer) mustEmbedUnimplementedReservationServiceServer() {}

// UnsafeReservationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServiceServer will
// result in compilation errors.
type UnsafeReservationServiceServer interface {
	mustEmbedUnimplementedReservationServiceServer()
}

func RegisterReservationServiceServer(s grpc.ServiceRegistrar, srv ReservationServiceServer) {
	s.RegisterService(&ReservationService_ServiceDesc, srv)
}

func _ReservationService_GetActiveForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetActiveForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetActiveForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetActiveForHost(ctx, req.(*GetActiveForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetActiveForGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveForGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetActiveForGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetActiveForGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetActiveForGuest(ctx, req.(*GetActiveForGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_GetFutureForAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFutureForAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).GetFutureForAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_GetFutureForAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).GetFutureForAccommodation(ctx, req.(*GetFutureForAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_ManualReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ManualReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).ManualReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_ManualReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).ManualReservation(ctx, req.(*ManualReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_AutomaticReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AutomaticReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).AutomaticReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_AutomaticReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).AutomaticReservation(ctx, req.(*AutomaticReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_ApproveReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApproveReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).ApproveReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_ApproveReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).ApproveReservation(ctx, req.(*ApproveReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationService_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationService_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceServer).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationService_ServiceDesc is the grpc.ServiceDesc for ReservationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReservationService",
	HandlerType: (*ReservationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveForHost",
			Handler:    _ReservationService_GetActiveForHost_Handler,
		},
		{
			MethodName: "GetActiveForGuest",
			Handler:    _ReservationService_GetActiveForGuest_Handler,
		},
		{
			MethodName: "GetFutureForAccommodation",
			Handler:    _ReservationService_GetFutureForAccommodation_Handler,
		},
		{
			MethodName: "ManualReservation",
			Handler:    _ReservationService_ManualReservation_Handler,
		},
		{
			MethodName: "AutomaticReservation",
			Handler:    _ReservationService_AutomaticReservation_Handler,
		},
		{
			MethodName: "ApproveReservation",
			Handler:    _ReservationService_ApproveReservation_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _ReservationService_CancelReservation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation/reservation-service.proto",
}
