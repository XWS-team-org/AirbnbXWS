// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: notification/notification-service.proto

package notification

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NotificationServiceRPC_GetNotificationsForUser_FullMethodName = "/NotificationServiceRPC/GetNotificationsForUser"
	NotificationServiceRPC_AddNotification_FullMethodName         = "/NotificationServiceRPC/AddNotification"
)

// NotificationServiceRPCClient is the client API for NotificationServiceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NotificationServiceRPCClient interface {
	GetNotificationsForUser(ctx context.Context, in *GetNotificationsForUserRequest, opts ...grpc.CallOption) (*GetNotificationsForUserResponse, error)
	AddNotification(ctx context.Context, in *AddNotificationRequest, opts ...grpc.CallOption) (*AddNotificationResponse, error)
}

type notificationServiceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewNotificationServiceRPCClient(cc grpc.ClientConnInterface) NotificationServiceRPCClient {
	return &notificationServiceRPCClient{cc}
}

func (c *notificationServiceRPCClient) GetNotificationsForUser(ctx context.Context, in *GetNotificationsForUserRequest, opts ...grpc.CallOption) (*GetNotificationsForUserResponse, error) {
	out := new(GetNotificationsForUserResponse)
	err := c.cc.Invoke(ctx, NotificationServiceRPC_GetNotificationsForUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *notificationServiceRPCClient) AddNotification(ctx context.Context, in *AddNotificationRequest, opts ...grpc.CallOption) (*AddNotificationResponse, error) {
	out := new(AddNotificationResponse)
	err := c.cc.Invoke(ctx, NotificationServiceRPC_AddNotification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NotificationServiceRPCServer is the server API for NotificationServiceRPC service.
// All implementations must embed UnimplementedNotificationServiceRPCServer
// for forward compatibility
type NotificationServiceRPCServer interface {
	GetNotificationsForUser(context.Context, *GetNotificationsForUserRequest) (*GetNotificationsForUserResponse, error)
	AddNotification(context.Context, *AddNotificationRequest) (*AddNotificationResponse, error)
	mustEmbedUnimplementedNotificationServiceRPCServer()
}

// UnimplementedNotificationServiceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedNotificationServiceRPCServer struct {
}

func (UnimplementedNotificationServiceRPCServer) GetNotificationsForUser(context.Context, *GetNotificationsForUserRequest) (*GetNotificationsForUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNotificationsForUser not implemented")
}
func (UnimplementedNotificationServiceRPCServer) AddNotification(context.Context, *AddNotificationRequest) (*AddNotificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddNotification not implemented")
}
func (UnimplementedNotificationServiceRPCServer) mustEmbedUnimplementedNotificationServiceRPCServer() {
}

// UnsafeNotificationServiceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NotificationServiceRPCServer will
// result in compilation errors.
type UnsafeNotificationServiceRPCServer interface {
	mustEmbedUnimplementedNotificationServiceRPCServer()
}

func RegisterNotificationServiceRPCServer(s grpc.ServiceRegistrar, srv NotificationServiceRPCServer) {
	s.RegisterService(&NotificationServiceRPC_ServiceDesc, srv)
}

func _NotificationServiceRPC_GetNotificationsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNotificationsForUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceRPCServer).GetNotificationsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationServiceRPC_GetNotificationsForUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceRPCServer).GetNotificationsForUser(ctx, req.(*GetNotificationsForUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NotificationServiceRPC_AddNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddNotificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NotificationServiceRPCServer).AddNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NotificationServiceRPC_AddNotification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NotificationServiceRPCServer).AddNotification(ctx, req.(*AddNotificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NotificationServiceRPC_ServiceDesc is the grpc.ServiceDesc for NotificationServiceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NotificationServiceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "NotificationServiceRPC",
	HandlerType: (*NotificationServiceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNotificationsForUser",
			Handler:    _NotificationServiceRPC_GetNotificationsForUser_Handler,
		},
		{
			MethodName: "AddNotification",
			Handler:    _NotificationServiceRPC_AddNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "notification/notification-service.proto",
}
