// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.0
// source: review/review-service.proto

package review

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RatingServiceRPC_RateHost_FullMethodName                   = "/RatingServiceRPC/RateHost"
	RatingServiceRPC_RateAccommodation_FullMethodName          = "/RatingServiceRPC/RateAccommodation"
	RatingServiceRPC_GetRatingsForHost_FullMethodName          = "/RatingServiceRPC/GetRatingsForHost"
	RatingServiceRPC_GetRatingsForAccommodation_FullMethodName = "/RatingServiceRPC/GetRatingsForAccommodation"
)

// RatingServiceRPCClient is the client API for RatingServiceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingServiceRPCClient interface {
	RateHost(ctx context.Context, in *RateHostRequest, opts ...grpc.CallOption) (*RateHostResponse, error)
	RateAccommodation(ctx context.Context, in *RateAccommodationRequest, opts ...grpc.CallOption) (*RateAccommodationResponse, error)
	GetRatingsForHost(ctx context.Context, in *GetRatingsForHostRequest, opts ...grpc.CallOption) (*GetRatingsForHostResponse, error)
	GetRatingsForAccommodation(ctx context.Context, in *GetRatingsForAccommodationRequest, opts ...grpc.CallOption) (*GetRatingsForAccommodationResponse, error)
}

type ratingServiceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingServiceRPCClient(cc grpc.ClientConnInterface) RatingServiceRPCClient {
	return &ratingServiceRPCClient{cc}
}

func (c *ratingServiceRPCClient) RateHost(ctx context.Context, in *RateHostRequest, opts ...grpc.CallOption) (*RateHostResponse, error) {
	out := new(RateHostResponse)
	err := c.cc.Invoke(ctx, RatingServiceRPC_RateHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceRPCClient) RateAccommodation(ctx context.Context, in *RateAccommodationRequest, opts ...grpc.CallOption) (*RateAccommodationResponse, error) {
	out := new(RateAccommodationResponse)
	err := c.cc.Invoke(ctx, RatingServiceRPC_RateAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceRPCClient) GetRatingsForHost(ctx context.Context, in *GetRatingsForHostRequest, opts ...grpc.CallOption) (*GetRatingsForHostResponse, error) {
	out := new(GetRatingsForHostResponse)
	err := c.cc.Invoke(ctx, RatingServiceRPC_GetRatingsForHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ratingServiceRPCClient) GetRatingsForAccommodation(ctx context.Context, in *GetRatingsForAccommodationRequest, opts ...grpc.CallOption) (*GetRatingsForAccommodationResponse, error) {
	out := new(GetRatingsForAccommodationResponse)
	err := c.cc.Invoke(ctx, RatingServiceRPC_GetRatingsForAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingServiceRPCServer is the server API for RatingServiceRPC service.
// All implementations must embed UnimplementedRatingServiceRPCServer
// for forward compatibility
type RatingServiceRPCServer interface {
	RateHost(context.Context, *RateHostRequest) (*RateHostResponse, error)
	RateAccommodation(context.Context, *RateAccommodationRequest) (*RateAccommodationResponse, error)
	GetRatingsForHost(context.Context, *GetRatingsForHostRequest) (*GetRatingsForHostResponse, error)
	GetRatingsForAccommodation(context.Context, *GetRatingsForAccommodationRequest) (*GetRatingsForAccommodationResponse, error)
	mustEmbedUnimplementedRatingServiceRPCServer()
}

// UnimplementedRatingServiceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRatingServiceRPCServer struct {
}

func (UnimplementedRatingServiceRPCServer) RateHost(context.Context, *RateHostRequest) (*RateHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateHost not implemented")
}
func (UnimplementedRatingServiceRPCServer) RateAccommodation(context.Context, *RateAccommodationRequest) (*RateAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RateAccommodation not implemented")
}
func (UnimplementedRatingServiceRPCServer) GetRatingsForHost(context.Context, *GetRatingsForHostRequest) (*GetRatingsForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingsForHost not implemented")
}
func (UnimplementedRatingServiceRPCServer) GetRatingsForAccommodation(context.Context, *GetRatingsForAccommodationRequest) (*GetRatingsForAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatingsForAccommodation not implemented")
}
func (UnimplementedRatingServiceRPCServer) mustEmbedUnimplementedRatingServiceRPCServer() {}

// UnsafeRatingServiceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingServiceRPCServer will
// result in compilation errors.
type UnsafeRatingServiceRPCServer interface {
	mustEmbedUnimplementedRatingServiceRPCServer()
}

func RegisterRatingServiceRPCServer(s grpc.ServiceRegistrar, srv RatingServiceRPCServer) {
	s.RegisterService(&RatingServiceRPC_ServiceDesc, srv)
}

func _RatingServiceRPC_RateHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceRPCServer).RateHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingServiceRPC_RateHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceRPCServer).RateHost(ctx, req.(*RateHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingServiceRPC_RateAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RateAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceRPCServer).RateAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingServiceRPC_RateAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceRPCServer).RateAccommodation(ctx, req.(*RateAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingServiceRPC_GetRatingsForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingsForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceRPCServer).GetRatingsForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingServiceRPC_GetRatingsForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceRPCServer).GetRatingsForHost(ctx, req.(*GetRatingsForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RatingServiceRPC_GetRatingsForAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRatingsForAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingServiceRPCServer).GetRatingsForAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RatingServiceRPC_GetRatingsForAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingServiceRPCServer).GetRatingsForAccommodation(ctx, req.(*GetRatingsForAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RatingServiceRPC_ServiceDesc is the grpc.ServiceDesc for RatingServiceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RatingServiceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RatingServiceRPC",
	HandlerType: (*RatingServiceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RateHost",
			Handler:    _RatingServiceRPC_RateHost_Handler,
		},
		{
			MethodName: "RateAccommodation",
			Handler:    _RatingServiceRPC_RateAccommodation_Handler,
		},
		{
			MethodName: "GetRatingsForHost",
			Handler:    _RatingServiceRPC_GetRatingsForHost_Handler,
		},
		{
			MethodName: "GetRatingsForAccommodation",
			Handler:    _RatingServiceRPC_GetRatingsForAccommodation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "review/review-service.proto",
}
