// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.4
// source: accommodation/accommodation-service.proto

package accommodation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AccommodationServiceRPC_DeleteAllForHost_FullMethodName     = "/AccommodationServiceRPC/DeleteAllForHost"
	AccommodationServiceRPC_CreateAccommodation_FullMethodName  = "/AccommodationServiceRPC/CreateAccommodation"
	AccommodationServiceRPC_ModifyAccommodation_FullMethodName  = "/AccommodationServiceRPC/ModifyAccommodation"
	AccommodationServiceRPC_SearchAccommodations_FullMethodName = "/AccommodationServiceRPC/SearchAccommodations"
	AccommodationServiceRPC_GetAccommodation_FullMethodName     = "/AccommodationServiceRPC/GetAccommodation"
	AccommodationServiceRPC_SetReservationOption_FullMethodName = "/AccommodationServiceRPC/SetReservationOption"
	AccommodationServiceRPC_GetAllAccommodations_FullMethodName = "/AccommodationServiceRPC/GetAllAccommodations"
)

// AccommodationServiceRPCClient is the client API for AccommodationServiceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccommodationServiceRPCClient interface {
	DeleteAllForHost(ctx context.Context, in *DeleteAllForHostRequest, opts ...grpc.CallOption) (*DeleteAllForHostResponse, error)
	CreateAccommodation(ctx context.Context, in *CreateAccommodationRequest, opts ...grpc.CallOption) (*CreateAccommodationResponse, error)
	ModifyAccommodation(ctx context.Context, in *ModifyAccommodationRequest, opts ...grpc.CallOption) (*ModifyAccommodationResponse, error)
	SearchAccommodations(ctx context.Context, in *SearchAccommodationsRequest, opts ...grpc.CallOption) (*SearchAccommodationsResponse, error)
	GetAccommodation(ctx context.Context, in *GetAccommodationRequest, opts ...grpc.CallOption) (*GetAccommodationResponse, error)
	SetReservationOption(ctx context.Context, in *SetReservationOptionRequest, opts ...grpc.CallOption) (*SetReservationOptionResponse, error)
	GetAllAccommodations(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error)
}

type accommodationServiceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewAccommodationServiceRPCClient(cc grpc.ClientConnInterface) AccommodationServiceRPCClient {
	return &accommodationServiceRPCClient{cc}
}

func (c *accommodationServiceRPCClient) DeleteAllForHost(ctx context.Context, in *DeleteAllForHostRequest, opts ...grpc.CallOption) (*DeleteAllForHostResponse, error) {
	out := new(DeleteAllForHostResponse)
	err := c.cc.Invoke(ctx, AccommodationServiceRPC_DeleteAllForHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceRPCClient) CreateAccommodation(ctx context.Context, in *CreateAccommodationRequest, opts ...grpc.CallOption) (*CreateAccommodationResponse, error) {
	out := new(CreateAccommodationResponse)
	err := c.cc.Invoke(ctx, AccommodationServiceRPC_CreateAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceRPCClient) ModifyAccommodation(ctx context.Context, in *ModifyAccommodationRequest, opts ...grpc.CallOption) (*ModifyAccommodationResponse, error) {
	out := new(ModifyAccommodationResponse)
	err := c.cc.Invoke(ctx, AccommodationServiceRPC_ModifyAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceRPCClient) SearchAccommodations(ctx context.Context, in *SearchAccommodationsRequest, opts ...grpc.CallOption) (*SearchAccommodationsResponse, error) {
	out := new(SearchAccommodationsResponse)
	err := c.cc.Invoke(ctx, AccommodationServiceRPC_SearchAccommodations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceRPCClient) GetAccommodation(ctx context.Context, in *GetAccommodationRequest, opts ...grpc.CallOption) (*GetAccommodationResponse, error) {
	out := new(GetAccommodationResponse)
	err := c.cc.Invoke(ctx, AccommodationServiceRPC_GetAccommodation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceRPCClient) SetReservationOption(ctx context.Context, in *SetReservationOptionRequest, opts ...grpc.CallOption) (*SetReservationOptionResponse, error) {
	out := new(SetReservationOptionResponse)
	err := c.cc.Invoke(ctx, AccommodationServiceRPC_SetReservationOption_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accommodationServiceRPCClient) GetAllAccommodations(ctx context.Context, in *GetAllRequest, opts ...grpc.CallOption) (*GetAllResponse, error) {
	out := new(GetAllResponse)
	err := c.cc.Invoke(ctx, AccommodationServiceRPC_GetAllAccommodations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccommodationServiceRPCServer is the server API for AccommodationServiceRPC service.
// All implementations must embed UnimplementedAccommodationServiceRPCServer
// for forward compatibility
type AccommodationServiceRPCServer interface {
	DeleteAllForHost(context.Context, *DeleteAllForHostRequest) (*DeleteAllForHostResponse, error)
	CreateAccommodation(context.Context, *CreateAccommodationRequest) (*CreateAccommodationResponse, error)
	ModifyAccommodation(context.Context, *ModifyAccommodationRequest) (*ModifyAccommodationResponse, error)
	SearchAccommodations(context.Context, *SearchAccommodationsRequest) (*SearchAccommodationsResponse, error)
	GetAccommodation(context.Context, *GetAccommodationRequest) (*GetAccommodationResponse, error)
	SetReservationOption(context.Context, *SetReservationOptionRequest) (*SetReservationOptionResponse, error)
	GetAllAccommodations(context.Context, *GetAllRequest) (*GetAllResponse, error)
	mustEmbedUnimplementedAccommodationServiceRPCServer()
}

// UnimplementedAccommodationServiceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedAccommodationServiceRPCServer struct {
}

func (UnimplementedAccommodationServiceRPCServer) DeleteAllForHost(context.Context, *DeleteAllForHostRequest) (*DeleteAllForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAllForHost not implemented")
}
func (UnimplementedAccommodationServiceRPCServer) CreateAccommodation(context.Context, *CreateAccommodationRequest) (*CreateAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccommodation not implemented")
}
func (UnimplementedAccommodationServiceRPCServer) ModifyAccommodation(context.Context, *ModifyAccommodationRequest) (*ModifyAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyAccommodation not implemented")
}
func (UnimplementedAccommodationServiceRPCServer) SearchAccommodations(context.Context, *SearchAccommodationsRequest) (*SearchAccommodationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchAccommodations not implemented")
}
func (UnimplementedAccommodationServiceRPCServer) GetAccommodation(context.Context, *GetAccommodationRequest) (*GetAccommodationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccommodation not implemented")
}
func (UnimplementedAccommodationServiceRPCServer) SetReservationOption(context.Context, *SetReservationOptionRequest) (*SetReservationOptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetReservationOption not implemented")
}
func (UnimplementedAccommodationServiceRPCServer) GetAllAccommodations(context.Context, *GetAllRequest) (*GetAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllAccommodations not implemented")
}
func (UnimplementedAccommodationServiceRPCServer) mustEmbedUnimplementedAccommodationServiceRPCServer() {
}

// UnsafeAccommodationServiceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccommodationServiceRPCServer will
// result in compilation errors.
type UnsafeAccommodationServiceRPCServer interface {
	mustEmbedUnimplementedAccommodationServiceRPCServer()
}

func RegisterAccommodationServiceRPCServer(s grpc.ServiceRegistrar, srv AccommodationServiceRPCServer) {
	s.RegisterService(&AccommodationServiceRPC_ServiceDesc, srv)
}

func _AccommodationServiceRPC_DeleteAllForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAllForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceRPCServer).DeleteAllForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationServiceRPC_DeleteAllForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceRPCServer).DeleteAllForHost(ctx, req.(*DeleteAllForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationServiceRPC_CreateAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceRPCServer).CreateAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationServiceRPC_CreateAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceRPCServer).CreateAccommodation(ctx, req.(*CreateAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationServiceRPC_ModifyAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceRPCServer).ModifyAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationServiceRPC_ModifyAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceRPCServer).ModifyAccommodation(ctx, req.(*ModifyAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationServiceRPC_SearchAccommodations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchAccommodationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceRPCServer).SearchAccommodations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationServiceRPC_SearchAccommodations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceRPCServer).SearchAccommodations(ctx, req.(*SearchAccommodationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationServiceRPC_GetAccommodation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAccommodationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceRPCServer).GetAccommodation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationServiceRPC_GetAccommodation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceRPCServer).GetAccommodation(ctx, req.(*GetAccommodationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationServiceRPC_SetReservationOption_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReservationOptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceRPCServer).SetReservationOption(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationServiceRPC_SetReservationOption_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceRPCServer).SetReservationOption(ctx, req.(*SetReservationOptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccommodationServiceRPC_GetAllAccommodations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccommodationServiceRPCServer).GetAllAccommodations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AccommodationServiceRPC_GetAllAccommodations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccommodationServiceRPCServer).GetAllAccommodations(ctx, req.(*GetAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccommodationServiceRPC_ServiceDesc is the grpc.ServiceDesc for AccommodationServiceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccommodationServiceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AccommodationServiceRPC",
	HandlerType: (*AccommodationServiceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteAllForHost",
			Handler:    _AccommodationServiceRPC_DeleteAllForHost_Handler,
		},
		{
			MethodName: "CreateAccommodation",
			Handler:    _AccommodationServiceRPC_CreateAccommodation_Handler,
		},
		{
			MethodName: "ModifyAccommodation",
			Handler:    _AccommodationServiceRPC_ModifyAccommodation_Handler,
		},
		{
			MethodName: "SearchAccommodations",
			Handler:    _AccommodationServiceRPC_SearchAccommodations_Handler,
		},
		{
			MethodName: "GetAccommodation",
			Handler:    _AccommodationServiceRPC_GetAccommodation_Handler,
		},
		{
			MethodName: "SetReservationOption",
			Handler:    _AccommodationServiceRPC_SetReservationOption_Handler,
		},
		{
			MethodName: "GetAllAccommodations",
			Handler:    _AccommodationServiceRPC_GetAllAccommodations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "accommodation/accommodation-service.proto",
}
