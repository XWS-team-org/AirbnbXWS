// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.22.4
// source: reservation/reservation-service.proto

package reservation

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ReservationServiceRPC_GetActiveForHost_FullMethodName               = "/ReservationServiceRPC/GetActiveForHost"
	ReservationServiceRPC_GetActiveForGuest_FullMethodName              = "/ReservationServiceRPC/GetActiveForGuest"
	ReservationServiceRPC_GetAllForGuest_FullMethodName                 = "/ReservationServiceRPC/GetAllForGuest"
	ReservationServiceRPC_GetAllForHost_FullMethodName                  = "/ReservationServiceRPC/GetAllForHost"
	ReservationServiceRPC_GetCancellationNumberForGuest_FullMethodName  = "/ReservationServiceRPC/GetCancellationNumberForGuest"
	ReservationServiceRPC_AcceptReservation_FullMethodName              = "/ReservationServiceRPC/AcceptReservation"
	ReservationServiceRPC_SendReservationRequest_FullMethodName         = "/ReservationServiceRPC/SendReservationRequest"
	ReservationServiceRPC_DeleteReservationRequest_FullMethodName       = "/ReservationServiceRPC/DeleteReservationRequest"
	ReservationServiceRPC_CancelReservation_FullMethodName              = "/ReservationServiceRPC/CancelReservation"
	ReservationServiceRPC_GetReservationRequestsForGuest_FullMethodName = "/ReservationServiceRPC/GetReservationRequestsForGuest"
	ReservationServiceRPC_GetReservationRequestsForHost_FullMethodName  = "/ReservationServiceRPC/GetReservationRequestsForHost"
	ReservationServiceRPC_DenyReservationRequest_FullMethodName         = "/ReservationServiceRPC/DenyReservationRequest"
)

// ReservationServiceRPCClient is the client API for ReservationServiceRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservationServiceRPCClient interface {
	GetActiveForHost(ctx context.Context, in *GetActiveForHostRequest, opts ...grpc.CallOption) (*GetActiveForHostResponse, error)
	GetActiveForGuest(ctx context.Context, in *GetActiveForGuestRequest, opts ...grpc.CallOption) (*GetActiveForGuestResponse, error)
	GetAllForGuest(ctx context.Context, in *GetAllForGuestRequest, opts ...grpc.CallOption) (*GetAllForGuestResponse, error)
	GetAllForHost(ctx context.Context, in *GetAllForHostRequest, opts ...grpc.CallOption) (*GetAllForHostResponse, error)
	GetCancellationNumberForGuest(ctx context.Context, in *GetCancellationNumberForGuestRequest, opts ...grpc.CallOption) (*GetCancellationNumberForGuestResponse, error)
	AcceptReservation(ctx context.Context, in *AcceptReservationRequest, opts ...grpc.CallOption) (*AcceptReservationResponse, error)
	SendReservationRequest(ctx context.Context, in *SendReservationRequestRequest, opts ...grpc.CallOption) (*SendReservationRequestResponse, error)
	DeleteReservationRequest(ctx context.Context, in *DeleteReservationRequestRequest, opts ...grpc.CallOption) (*DeleteReservationRequestResponse, error)
	CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error)
	GetReservationRequestsForGuest(ctx context.Context, in *GetReservationRequestsForGuestRequest, opts ...grpc.CallOption) (*GetReservationRequestsForGuestResponse, error)
	GetReservationRequestsForHost(ctx context.Context, in *GetReservationRequestsForHostRequest, opts ...grpc.CallOption) (*GetReservationRequestsForHostResponse, error)
	DenyReservationRequest(ctx context.Context, in *DenyReservationRequestRequest, opts ...grpc.CallOption) (*DenyReservationRequestResponse, error)
}

type reservationServiceRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewReservationServiceRPCClient(cc grpc.ClientConnInterface) ReservationServiceRPCClient {
	return &reservationServiceRPCClient{cc}
}

func (c *reservationServiceRPCClient) GetActiveForHost(ctx context.Context, in *GetActiveForHostRequest, opts ...grpc.CallOption) (*GetActiveForHostResponse, error) {
	out := new(GetActiveForHostResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_GetActiveForHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) GetActiveForGuest(ctx context.Context, in *GetActiveForGuestRequest, opts ...grpc.CallOption) (*GetActiveForGuestResponse, error) {
	out := new(GetActiveForGuestResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_GetActiveForGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) GetAllForGuest(ctx context.Context, in *GetAllForGuestRequest, opts ...grpc.CallOption) (*GetAllForGuestResponse, error) {
	out := new(GetAllForGuestResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_GetAllForGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) GetAllForHost(ctx context.Context, in *GetAllForHostRequest, opts ...grpc.CallOption) (*GetAllForHostResponse, error) {
	out := new(GetAllForHostResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_GetAllForHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) GetCancellationNumberForGuest(ctx context.Context, in *GetCancellationNumberForGuestRequest, opts ...grpc.CallOption) (*GetCancellationNumberForGuestResponse, error) {
	out := new(GetCancellationNumberForGuestResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_GetCancellationNumberForGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) AcceptReservation(ctx context.Context, in *AcceptReservationRequest, opts ...grpc.CallOption) (*AcceptReservationResponse, error) {
	out := new(AcceptReservationResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_AcceptReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) SendReservationRequest(ctx context.Context, in *SendReservationRequestRequest, opts ...grpc.CallOption) (*SendReservationRequestResponse, error) {
	out := new(SendReservationRequestResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_SendReservationRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) DeleteReservationRequest(ctx context.Context, in *DeleteReservationRequestRequest, opts ...grpc.CallOption) (*DeleteReservationRequestResponse, error) {
	out := new(DeleteReservationRequestResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_DeleteReservationRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) CancelReservation(ctx context.Context, in *CancelReservationRequest, opts ...grpc.CallOption) (*CancelReservationResponse, error) {
	out := new(CancelReservationResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_CancelReservation_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) GetReservationRequestsForGuest(ctx context.Context, in *GetReservationRequestsForGuestRequest, opts ...grpc.CallOption) (*GetReservationRequestsForGuestResponse, error) {
	out := new(GetReservationRequestsForGuestResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_GetReservationRequestsForGuest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) GetReservationRequestsForHost(ctx context.Context, in *GetReservationRequestsForHostRequest, opts ...grpc.CallOption) (*GetReservationRequestsForHostResponse, error) {
	out := new(GetReservationRequestsForHostResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_GetReservationRequestsForHost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservationServiceRPCClient) DenyReservationRequest(ctx context.Context, in *DenyReservationRequestRequest, opts ...grpc.CallOption) (*DenyReservationRequestResponse, error) {
	out := new(DenyReservationRequestResponse)
	err := c.cc.Invoke(ctx, ReservationServiceRPC_DenyReservationRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservationServiceRPCServer is the server API for ReservationServiceRPC service.
// All implementations must embed UnimplementedReservationServiceRPCServer
// for forward compatibility
type ReservationServiceRPCServer interface {
	GetActiveForHost(context.Context, *GetActiveForHostRequest) (*GetActiveForHostResponse, error)
	GetActiveForGuest(context.Context, *GetActiveForGuestRequest) (*GetActiveForGuestResponse, error)
	GetAllForGuest(context.Context, *GetAllForGuestRequest) (*GetAllForGuestResponse, error)
	GetAllForHost(context.Context, *GetAllForHostRequest) (*GetAllForHostResponse, error)
	GetCancellationNumberForGuest(context.Context, *GetCancellationNumberForGuestRequest) (*GetCancellationNumberForGuestResponse, error)
	AcceptReservation(context.Context, *AcceptReservationRequest) (*AcceptReservationResponse, error)
	SendReservationRequest(context.Context, *SendReservationRequestRequest) (*SendReservationRequestResponse, error)
	DeleteReservationRequest(context.Context, *DeleteReservationRequestRequest) (*DeleteReservationRequestResponse, error)
	CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error)
	GetReservationRequestsForGuest(context.Context, *GetReservationRequestsForGuestRequest) (*GetReservationRequestsForGuestResponse, error)
	GetReservationRequestsForHost(context.Context, *GetReservationRequestsForHostRequest) (*GetReservationRequestsForHostResponse, error)
	DenyReservationRequest(context.Context, *DenyReservationRequestRequest) (*DenyReservationRequestResponse, error)
	mustEmbedUnimplementedReservationServiceRPCServer()
}

// UnimplementedReservationServiceRPCServer must be embedded to have forward compatible implementations.
type UnimplementedReservationServiceRPCServer struct {
}

func (UnimplementedReservationServiceRPCServer) GetActiveForHost(context.Context, *GetActiveForHostRequest) (*GetActiveForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveForHost not implemented")
}
func (UnimplementedReservationServiceRPCServer) GetActiveForGuest(context.Context, *GetActiveForGuestRequest) (*GetActiveForGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActiveForGuest not implemented")
}
func (UnimplementedReservationServiceRPCServer) GetAllForGuest(context.Context, *GetAllForGuestRequest) (*GetAllForGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllForGuest not implemented")
}
func (UnimplementedReservationServiceRPCServer) GetAllForHost(context.Context, *GetAllForHostRequest) (*GetAllForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllForHost not implemented")
}
func (UnimplementedReservationServiceRPCServer) GetCancellationNumberForGuest(context.Context, *GetCancellationNumberForGuestRequest) (*GetCancellationNumberForGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCancellationNumberForGuest not implemented")
}
func (UnimplementedReservationServiceRPCServer) AcceptReservation(context.Context, *AcceptReservationRequest) (*AcceptReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AcceptReservation not implemented")
}
func (UnimplementedReservationServiceRPCServer) SendReservationRequest(context.Context, *SendReservationRequestRequest) (*SendReservationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendReservationRequest not implemented")
}
func (UnimplementedReservationServiceRPCServer) DeleteReservationRequest(context.Context, *DeleteReservationRequestRequest) (*DeleteReservationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReservationRequest not implemented")
}
func (UnimplementedReservationServiceRPCServer) CancelReservation(context.Context, *CancelReservationRequest) (*CancelReservationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelReservation not implemented")
}
func (UnimplementedReservationServiceRPCServer) GetReservationRequestsForGuest(context.Context, *GetReservationRequestsForGuestRequest) (*GetReservationRequestsForGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservationRequestsForGuest not implemented")
}
func (UnimplementedReservationServiceRPCServer) GetReservationRequestsForHost(context.Context, *GetReservationRequestsForHostRequest) (*GetReservationRequestsForHostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetReservationRequestsForHost not implemented")
}
func (UnimplementedReservationServiceRPCServer) DenyReservationRequest(context.Context, *DenyReservationRequestRequest) (*DenyReservationRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DenyReservationRequest not implemented")
}
func (UnimplementedReservationServiceRPCServer) mustEmbedUnimplementedReservationServiceRPCServer() {}

// UnsafeReservationServiceRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservationServiceRPCServer will
// result in compilation errors.
type UnsafeReservationServiceRPCServer interface {
	mustEmbedUnimplementedReservationServiceRPCServer()
}

func RegisterReservationServiceRPCServer(s grpc.ServiceRegistrar, srv ReservationServiceRPCServer) {
	s.RegisterService(&ReservationServiceRPC_ServiceDesc, srv)
}

func _ReservationServiceRPC_GetActiveForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).GetActiveForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_GetActiveForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).GetActiveForHost(ctx, req.(*GetActiveForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_GetActiveForGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetActiveForGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).GetActiveForGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_GetActiveForGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).GetActiveForGuest(ctx, req.(*GetActiveForGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_GetAllForGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllForGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).GetAllForGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_GetAllForGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).GetAllForGuest(ctx, req.(*GetAllForGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_GetAllForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).GetAllForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_GetAllForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).GetAllForHost(ctx, req.(*GetAllForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_GetCancellationNumberForGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCancellationNumberForGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).GetCancellationNumberForGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_GetCancellationNumberForGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).GetCancellationNumberForGuest(ctx, req.(*GetCancellationNumberForGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_AcceptReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).AcceptReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_AcceptReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).AcceptReservation(ctx, req.(*AcceptReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_SendReservationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendReservationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).SendReservationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_SendReservationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).SendReservationRequest(ctx, req.(*SendReservationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_DeleteReservationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReservationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).DeleteReservationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_DeleteReservationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).DeleteReservationRequest(ctx, req.(*DeleteReservationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_CancelReservation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelReservationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).CancelReservation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_CancelReservation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).CancelReservation(ctx, req.(*CancelReservationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_GetReservationRequestsForGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequestsForGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).GetReservationRequestsForGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_GetReservationRequestsForGuest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).GetReservationRequestsForGuest(ctx, req.(*GetReservationRequestsForGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_GetReservationRequestsForHost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReservationRequestsForHostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).GetReservationRequestsForHost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_GetReservationRequestsForHost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).GetReservationRequestsForHost(ctx, req.(*GetReservationRequestsForHostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReservationServiceRPC_DenyReservationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DenyReservationRequestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservationServiceRPCServer).DenyReservationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReservationServiceRPC_DenyReservationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservationServiceRPCServer).DenyReservationRequest(ctx, req.(*DenyReservationRequestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ReservationServiceRPC_ServiceDesc is the grpc.ServiceDesc for ReservationServiceRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReservationServiceRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ReservationServiceRPC",
	HandlerType: (*ReservationServiceRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetActiveForHost",
			Handler:    _ReservationServiceRPC_GetActiveForHost_Handler,
		},
		{
			MethodName: "GetActiveForGuest",
			Handler:    _ReservationServiceRPC_GetActiveForGuest_Handler,
		},
		{
			MethodName: "GetAllForGuest",
			Handler:    _ReservationServiceRPC_GetAllForGuest_Handler,
		},
		{
			MethodName: "GetAllForHost",
			Handler:    _ReservationServiceRPC_GetAllForHost_Handler,
		},
		{
			MethodName: "GetCancellationNumberForGuest",
			Handler:    _ReservationServiceRPC_GetCancellationNumberForGuest_Handler,
		},
		{
			MethodName: "AcceptReservation",
			Handler:    _ReservationServiceRPC_AcceptReservation_Handler,
		},
		{
			MethodName: "SendReservationRequest",
			Handler:    _ReservationServiceRPC_SendReservationRequest_Handler,
		},
		{
			MethodName: "DeleteReservationRequest",
			Handler:    _ReservationServiceRPC_DeleteReservationRequest_Handler,
		},
		{
			MethodName: "CancelReservation",
			Handler:    _ReservationServiceRPC_CancelReservation_Handler,
		},
		{
			MethodName: "GetReservationRequestsForGuest",
			Handler:    _ReservationServiceRPC_GetReservationRequestsForGuest_Handler,
		},
		{
			MethodName: "GetReservationRequestsForHost",
			Handler:    _ReservationServiceRPC_GetReservationRequestsForHost_Handler,
		},
		{
			MethodName: "DenyReservationRequest",
			Handler:    _ReservationServiceRPC_DenyReservationRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reservation/reservation-service.proto",
}
